name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write   # This is required for OIDC
      contents: read    # This is usually needed for code checkout

    steps:
      # 1. Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Configure AWS credentials via OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::101134489152:role/eksctl-bedrock-cluster-new-addon-iamserviceac-Role1-A1yPx480qkH2
          aws-region: us-east-1


      # 3. Debug: Check secret value (for testing only; remove in production)
      - name: Debug AWS_OIDC_ROLE_ARN
        run: echo "Role ARN is $AWS_OIDC_ROLE_ARN"
        env:
          AWS_OIDC_ROLE_ARN: arn:aws:iam::101134489152:role/eksctl-bedrock-cluster-new-addon-iamserviceac-Role1-A1yPx480qkH2

      # 4. Debug: Verify AWS identity
      - name: Test AWS Identity
        run: aws sts get-caller-identity

      # 5. Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      # 6. Initialize Terraform
      - name: Terraform Init
        run: terraform init -reconfigure

      # 7. Terraform Format Check
      - name: Terraform Format
        run: terraform fmt -check

      # 8. Terraform Validate
      - name: Terraform Validate
        run: terraform validate

      # 9. Terraform Plan (for all branches)
      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan

      # 10. Conditional Apply (only on main)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
